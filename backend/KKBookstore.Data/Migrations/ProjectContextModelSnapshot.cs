// <auto-generated />
using System;
using KKBookstore.Data.EntitiesContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KKBookstore.Data.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KKBookstore.Data.Entities.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DeliveryMethod", b =>
                {
                    b.Property<int>("DeliveryMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryMethodID"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeliveryMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("DeliveryMethodID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DiscountVoucher", b =>
                {
                    b.Property<int>("DiscountVoucherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountVoucherID"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShippingVoucher")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MaxApplyQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinApplyQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("DiscountVoucherID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("ProductID");

                    b.ToTable("DiscountVouchers");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Option", b =>
                {
                    b.Property<int>("OptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionID"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("OptionID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("ProductID");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.OptionValue", b =>
                {
                    b.Property<int>("OptionValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionValueID"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptionID")
                        .HasColumnType("int");

                    b.HasKey("OptionValueID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("OptionID");

                    b.ToTable("OptionValues");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ConfirmedDeliveryWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ConfirmedReceivedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryMethodID")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountVoucherID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DueWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpectedDeliveryWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OrderWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PickingCompletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ShippingAddressID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeliveryMethodID");

                    b.HasIndex("DiscountVoucherID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("ShippingAddressID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.OrderLine", b =>
                {
                    b.Property<int>("OrderLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderLineID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountVoucherID")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("PickingCompletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SkuID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderLineID");

                    b.HasIndex("DiscountVoucherID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("OrderID");

                    b.HasIndex("SkuID");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodID"));

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAuthor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductTypeID")
                        .HasColumnType("int");

                    b.Property<string>("UnitMeasureCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("ProductTypeCode");

                    b.HasIndex("UnitMeasureCode");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ProductPriceHistory", b =>
                {
                    b.Property<int>("SkuID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EndWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("RecommendedRetailPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SkuID", "StartWhen");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("ProductPriceHistories");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ProductType", b =>
                {
                    b.Property<string>("ProductTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentProductTypeID")
                        .HasColumnType("int");

                    b.Property<string>("ParentProductTypeProductTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductTypeID")
                        .HasColumnType("int");

                    b.HasKey("ProductTypeCode");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("ParentProductTypeProductTypeCode");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int>("SkuID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RatingID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("SkuID");

                    b.HasIndex("UserID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.RefAddressType", b =>
                {
                    b.Property<string>("RefAddressTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RefAddressTypeCode");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("RefAddressTypes");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ShippingAddress", b =>
                {
                    b.Property<int>("ShippingAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingAddressId"));

                    b.Property<string>("AddressTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressTypeRefAddressTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commune")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DetailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ShippingAddressId");

                    b.HasIndex("AddressTypeRefAddressTypeCode");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("UserID");

                    b.ToTable("ShippingAddresses");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartItemID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SkuID")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartItemID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("SkuID");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Sku", b =>
                {
                    b.Property<int>("SkuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkuID"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DiscontinuedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RecommendedRetailPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("SkuID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("ProductID");

                    b.ToTable("Skus");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.SkuImage", b =>
                {
                    b.Property<int>("SkuImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkuImageID"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LargeImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SkuID")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkuImageID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("SkuID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.SkuOptionValue", b =>
                {
                    b.Property<int>("SkuID")
                        .HasColumnType("int");

                    b.Property<int>("OptionID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OptionValueID")
                        .HasColumnType("int");

                    b.HasKey("SkuID", "OptionID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("OptionID");

                    b.HasIndex("OptionValueID");

                    b.ToTable("SkuOptionValues");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.UnitMeasure", b =>
                {
                    b.Property<string>("UnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UnitMeasureCode");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("UnitMeasures");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LoginType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPreferences")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("LastEditedBy");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.UserPassword", b =>
                {
                    b.Property<int>("UserPasswordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPasswordID"));

                    b.Property<DateTimeOffset>("ChangedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserPasswordID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("UserID");

                    b.ToTable("UserPasswords");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.WrittenBy", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("AuthorID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("WrittenWhen")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ProductID", "AuthorID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("WrittenBys");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Author", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DeliveryMethod", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DiscountVoucher", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Option", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.OptionValue", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Option", "Option")
                        .WithMany("OptionValues")
                        .HasForeignKey("OptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Order", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryMethodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.DiscountVoucher", "DiscountVoucher")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountVoucherID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.ShippingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("DiscountVoucher");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.OrderLine", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.DiscountVoucher", "DiscountVoucher")
                        .WithMany("OrderLines")
                        .HasForeignKey("DiscountVoucherID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany("OrderLines")
                        .HasForeignKey("SkuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiscountVoucher");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Order");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.PaymentMethod", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Product", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.UnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ProductType");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ProductPriceHistory", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ProductType", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.ProductType", "ParentProductType")
                        .WithMany()
                        .HasForeignKey("ParentProductTypeProductTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ParentProductType");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Rating", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Sku");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.RefAddressType", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ShippingAddress", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.RefAddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeRefAddressTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "User")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Sku", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.SkuImage", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany("SkuImages")
                        .HasForeignKey("SkuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.SkuOptionValue", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Option", "Option")
                        .WithMany("skuOptionValues")
                        .HasForeignKey("OptionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.OptionValue", "OptionValue")
                        .WithMany("SkuOptionVales")
                        .HasForeignKey("OptionValueID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany("SkuOptionValues")
                        .HasForeignKey("SkuID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Option");

                    b.Navigation("OptionValue");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.UnitMeasure", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.User", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.UserPassword", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "User")
                        .WithMany("UserPasswords")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.WrittenBy", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Product", "Product")
                        .WithMany("BookAuthors")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DeliveryMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DiscountVoucher", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Option", b =>
                {
                    b.Navigation("OptionValues");

                    b.Navigation("skuOptionValues");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.OptionValue", b =>
                {
                    b.Navigation("SkuOptionVales");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Product", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Sku", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("SkuImages");

                    b.Navigation("SkuOptionValues");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("UserPasswords");
                });
#pragma warning restore 612, 618
        }
    }
}
