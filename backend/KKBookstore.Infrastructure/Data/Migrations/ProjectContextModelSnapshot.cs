// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KKBookstore.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KKBookstore.Data.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DeliveryMethod", b =>
                {
                    b.Property<int>("DeliveryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryMethodId"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DeliveryMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("DeliveryMethodId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DiscountVoucher", b =>
                {
                    b.Property<int>("DiscountVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountVoucherId"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("EndWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShippingVoucher")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("MaxApplyQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinApplyQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("DiscountVoucherId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("DiscountVouchers");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OptionId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.OptionValue", b =>
                {
                    b.Property<int>("OptionValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionValueId"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.HasKey("OptionValueId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("OptionId");

                    b.ToTable("OptionValues");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ConfirmedDeliveryWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ConfirmedReceivedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryInstruction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountVoucherId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DueWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ExpectedDeliveryWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("OrderWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PickingCompletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("DiscountVoucherId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.OrderLine", b =>
                {
                    b.Property<int>("OrderLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderLineId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountVoucherId")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("PickingCompletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SkuId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderLineId");

                    b.HasIndex("DiscountVoucherId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SkuId");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAuthor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UnitMeasureCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("ProductTypeCode");

                    b.HasIndex("UnitMeasureCode");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ProductPriceHistory", b =>
                {
                    b.Property<int>("SkuId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("EndWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("RecommendedRetailPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("SkuId", "StartWhen");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("ProductPriceHistories");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ProductType", b =>
                {
                    b.Property<string>("ProductTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentProductTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ParentProductTypeProductTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductTypeCode");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("ParentProductTypeProductTypeCode");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<int>("SkuId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("SkuId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.RefAddressType", b =>
                {
                    b.Property<string>("RefAddressTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("RefAddressTypeCode");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("RefAddressTypes");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ShippingAddress", b =>
                {
                    b.Property<int>("ShippingAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShippingAddressId"));

                    b.Property<string>("AddressTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressTypeRefAddressTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Commune")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("DetailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ShippingAddressId");

                    b.HasIndex("AddressTypeRefAddressTypeCode");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ShippingAddresses");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartItemId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SkuId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("SkuId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Sku", b =>
                {
                    b.Property<int>("SkuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkuId"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DiscontinuedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("RecommendedRetailPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TaxRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("ValidFrom")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ValidTo")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("SkuId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Skus");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.SkuImage", b =>
                {
                    b.Property<int>("SkuImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkuImageId"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LargeImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("SkuId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkuImageId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("SkuId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.SkuOptionValue", b =>
                {
                    b.Property<int>("SkuId")
                        .HasColumnType("int");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("OptionValueId")
                        .HasColumnType("int");

                    b.HasKey("SkuId", "OptionId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("OptionId");

                    b.HasIndex("OptionValueId");

                    b.ToTable("SkuOptionValues");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.UnitMeasure", b =>
                {
                    b.Property<string>("UnitMeasureCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UnitMeasureCode");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("UnitMeasures");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LoginType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPreferences")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("LastEditedBy");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.UserPassword", b =>
                {
                    b.Property<int>("UserPasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPasswordId"));

                    b.Property<DateTimeOffset>("ChangedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPasswordId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPasswords");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.WrittenBy", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastEditedBy")
                        .HasColumnType("int");

                    b.Property<int>("LastEditedByUserUserId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastEditedWhen")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("WrittenWhen")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("ProductId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("LastEditedByUserUserId");

                    b.ToTable("WrittenBys");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Author", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DeliveryMethod", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DiscountVoucher", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Option", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.OptionValue", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Option", "Option")
                        .WithMany("OptionValues")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Order", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.DiscountVoucher", "DiscountVoucher")
                        .WithMany("Orders")
                        .HasForeignKey("DiscountVoucherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.ShippingAddress", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("DiscountVoucher");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.OrderLine", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.DiscountVoucher", "DiscountVoucher")
                        .WithMany("OrderLines")
                        .HasForeignKey("DiscountVoucherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany("OrderLines")
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiscountVoucher");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Order");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.PaymentMethod", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Product", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.UnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ProductType");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ProductPriceHistory", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ProductType", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.ProductType", "ParentProductType")
                        .WithMany()
                        .HasForeignKey("ParentProductTypeProductTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("ParentProductType");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Rating", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Sku");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.RefAddressType", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ShippingAddress", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.RefAddressType", "AddressType")
                        .WithMany()
                        .HasForeignKey("AddressTypeRefAddressTypeCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "User")
                        .WithMany("ShippingAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddressType");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany()
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Sku", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Product", "Product")
                        .WithMany("Skus")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.SkuImage", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany("SkuImages")
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.SkuOptionValue", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Option", "Option")
                        .WithMany("skuOptionValues")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.OptionValue", "OptionValue")
                        .WithMany("SkuOptionVales")
                        .HasForeignKey("OptionValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Sku", "Sku")
                        .WithMany("SkuOptionValues")
                        .HasForeignKey("SkuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Option");

                    b.Navigation("OptionValue");

                    b.Navigation("Sku");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.UnitMeasure", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.User", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.UserPassword", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "User")
                        .WithMany("UserPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LastEditedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.WrittenBy", b =>
                {
                    b.HasOne("KKBookstore.Data.Entities.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.User", "LastEditedByUser")
                        .WithMany()
                        .HasForeignKey("LastEditedByUserUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KKBookstore.Data.Entities.Product", "Product")
                        .WithMany("BookAuthors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("LastEditedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DeliveryMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.DiscountVoucher", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Option", b =>
                {
                    b.Navigation("OptionValues");

                    b.Navigation("skuOptionValues");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.OptionValue", b =>
                {
                    b.Navigation("SkuOptionVales");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Product", b =>
                {
                    b.Navigation("BookAuthors");

                    b.Navigation("Skus");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.Sku", b =>
                {
                    b.Navigation("OrderLines");

                    b.Navigation("SkuImages");

                    b.Navigation("SkuOptionValues");
                });

            modelBuilder.Entity("KKBookstore.Data.Entities.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Ratings");

                    b.Navigation("ShippingAddresses");

                    b.Navigation("UserPasswords");
                });
#pragma warning restore 612, 618
        }
    }
}
